<?php

/**
 * @file
 * Core functions for the Wysiwyg Fields module.
 */

/**
 * Implements hook_theme().
 */
function wysiwyg_fields_theme() {
  $items = array();

  $items['wysiwyg_fields_field_form'] = array(
    'render element' => 'element',
    'template'       => 'wysiwyg-fields-field-form',
  );

  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function wysiwyg_fields_field_widget_info() {
  $field_types = field_info_field_types();

  $widget['wysiwyg_fields'] = array(
    'label'       => t('Wysiwyg field'),
    'description' => t('Attach the field to the Wysiwyg'),
    'field types' => array_keys($field_types),
    'settings'    => array(
      'widget_type'     => '',
      'widget_settings' => array(),
      'label'           => '',
      'icon'            => array(
        'bundle' => 'lullacons_pack1',
        'icon'   => 'doc-option-add',
      ),
      'formatters'      => array(),
    ),
    'behaviors'   => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widget;
}

/**
 * Implements hook_field_widget_settings_form().
 *
 * @param $field
 * @param $instance
 *
 * @return mixed
 */
function wysiwyg_fields_field_widget_settings_form($field, $instance) {
  $field_info = field_info_field_types($field['type']);
  $settings   = $instance['widget']['settings'];

  // Sub-widget type.
  $widget_types = field_ui_widget_type_options($field['type']);
  unset($widget_types['wysiwyg_fields']);

  $widget_type = isset($settings['widget_type']) && !empty($settings['widget_type']) ? $settings['widget_type'] : $field_info['default_widget'];
  // Get widget type from AJAX request if available..
  if (isset($_POST['instance']['widget']['settings']['widget_type'])) {
    $widget_type = filter_xss($_POST['instance']['widget']['settings']['widget_type']);
  }

  $form['widget_type'] = array(
    '#type'          => 'select',
    '#title'         => t('Sub widget type'),
    '#required'      => TRUE,
    '#options'       => $widget_types,
    '#default_value' => $widget_type,
    '#description'   => t('The subtype of form element you would like to present to the user when using this Wysiwyg Field.'),
    '#ajax'          => array(
      'callback' => 'wysiwyg_fields_field_widget_settings_ajax',
      'wrapper'  => 'sub_widget_settings-wrapper',
    ),
  );

  $form['widget_settings'] = array(
    '#type'   => 'fieldset',
    '#title'  => t('Sub widget settings'),
    '#tree'   => TRUE,
    '#prefix' => '<div id="sub_widget_settings-wrapper">',
    '#suffix' => '</div>',
  );

  // Pass through to field default widget.
  $instance['widget']             = field_info_widget_types($widget_type);
  $instance['widget']['type']     = $widget_type;
  $instance['widget']['settings'] = $settings['widget_settings'] + $instance['widget']['settings'];

  $function = "{$instance['widget']['module']}_field_widget_settings_form";
  if (function_exists($function)) {
    $widget_form = $function($field, $instance);
    if (is_array($widget_form)) {
      $form['widget_settings'] += $widget_form;
    }
  }

  $form['label'] = array(
    '#title'         => t('Label'),
    '#type'          => 'textfield',
    '#default_value' => $settings['label'],
  );

  $form['icon'] = array(
    '#title'          => t('Icon'),
    '#type'           => 'icon_selector',
    '#default_bundle' => $settings['icon']['bundle'],
    '#default_icon'   => $settings['icon']['icon'],
  );

  $form['formatters'] = array(
    '#title'         => t('Formatters'),
    '#type'          => 'select',
    '#options'       => field_ui_formatter_options($field['type']),
    '#default_value' => !empty($settings['formatters']) ? $settings['formatters'] : $field_info['default_formatter'],
    '#multiple'      => TRUE,
    '#required'      => TRUE,
  );

  return $form;
}

/**
 * AJAX callback for Wysiwyg Fields field widget settings form sub widget.
 *
 * @param $form
 *
 * @return mixed
 */
function wysiwyg_fields_field_widget_settings_ajax($form) {
  return $form['instance']['widget']['settings']['widget_settings'];
}

/**
 * Implements hook_field_widget_form().
 *
 * @param $form
 * @param $form_state
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 *
 * @return array
 */
function wysiwyg_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items) {
  $field_name = $field['field_name'];
  $parents    = $form['#parents'];

  // Determine the number of widgets to display.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $max         = $field_state['items_count'];

  $description = field_filter_xss($instance['description']);

  $id = "wysiwyg_fields-{$instance['entity_type']}-{$instance['bundle']}-{$field_name}";

  $original_form_state = $form_state;
  $field_elements      = array();

  // Modify field and instance settings before passing through to the default
  // widget form function to ensure each widget is treated as a single value
  // widget.
  $settings = $instance['widget']['settings'];

  $field_info                                              = field_info_field_types($field['type']);
  $widget_type                                             = isset($settings['widget_type']) && !empty($settings['widget_type']) ? $settings['widget_type'] : $field_info['default_widget'];
  $subinstance                                             = $instance;
  $subinstance['widget']                                   = field_info_widget_types($widget_type);
  $subinstance['widget']['type']                           = $widget_type;
  $subinstance['widget']['settings']                       = $settings['widget_settings'] + $subinstance['widget']['settings'];
  $form_state['field'][$field_name][$langcode]['instance'] = $subinstance;

  $field['cardinality'] = $form_state['field'][$field_name][$langcode]['field']['cardinality'] = 1;

  $function = $subinstance['widget']['module'] . '_field_widget_form';
  if (function_exists($function)) {
    for ($delta = 0; $delta <= $max; $delta++) {
      $form_state['field'][$field_name][$langcode]['items'] = isset($original_form_state['field'][$field_name][$langcode]['items'][$delta]) ? array($original_form_state['field'][$field_name][$langcode]['items'][$delta]) : NULL;
      $item                                                 = isset($items[$delta]) ? array($items[$delta]) : array();

      $element = array(
        '#entity_type'   => $subinstance['entity_type'],
        '#entity'        => isset($form['#entity']) ? $form['#entity'] : NULL,
        '#bundle'        => $subinstance['bundle'],
        '#field_name'    => $field_name,
        '#language'      => $langcode,
        '#field_parents' => $parents,
        '#columns'       => array_keys($field['columns']),
        '#title'         => '',
        '#description'   => '',
        '#required'      => FALSE,
        '#delta'         => $delta,
        '#weight'        => $delta,
      );

      if ($element = $function($form, $form_state, $field, $subinstance, $langcode, $item, $delta, $element)) {
        if (count($element) == 1 && isset($element[0]) && is_array($element[0])) {
          $element = $element[0];
        }

        // Allow modules to alter the field widget form element.
        $context = array(
          'form'     => $form,
          'field'    => $field,
          'instance' => $subinstance,
          'langcode' => $langcode,
          'items'    => $items,
          'delta'    => $delta,
        );
        drupal_alter(array(
          'field_widget_form',
          'field_widget_' . $subinstance['widget']['type'] . '_form'
        ), $element, $form_state, $context);

        $field_elements[$delta] = $element;
      }
    }

    if ($field_elements) {
      $field_elements += array(
        '#attached'    => array(
          'js'  => array(drupal_get_path('module', 'wysiwyg_fields') . '/wysiwyg_fields.js'),
          'css' => array(drupal_get_path('module', 'wysiwyg_fields') . '/wysiwyg_fields.css'),
        ),
        '#theme'       => 'wysiwyg_fields_field_form',
        '#field_name'  => $field['field_name'],
        '#cardinality' => FIELD_CARDINALITY_UNLIMITED,
        '#description' => $description,
        '#prefix'      => "<div id='{$id}-wrapper' class='element-invisible'><div id='{$id}-inner'>",
        '#suffix'      => '</div></div>',
        '#max_delta'   => $max,
      );

      // Add formatter fields and 'add more' button, if not working with a
      // programmed form.
      if (empty($form_state['programmed'])) {

        // Wysiwyg Fields setting form.
        $field_elements['wysiwyg_fields'] = array(
          '#weight'  => 100,
          '#tree'    => TRUE,
          '#parents' => array($field_name, 'wysiwyg_fields'),
        );

        // Formatters.
        $field_elements['wysiwyg_fields']['formatter'] = array(
          '#type' => 'container',
        );

        $formatters = array();
        foreach ($instance['widget']['settings']['formatters'] as $formatter_name) {
          $formatter = field_info_formatter_types($formatter_name);
          if (isset($formatter)) {
            $formatters[$formatter_name] = $formatter['label'];
          }
        }
        $default_formatter = isset($form_state['values'][$field_name]['wysiwyg_fields']['formatter']['type']) ? $form_state['values'][$field_name]['wysiwyg_fields']['formatter']['type'] : key($formatters);

        // If no formatter is defined, fall back to the fields default formatter.
        if (is_null($default_formatter)) {
          $default_formatter = $field_info['default_formatter'];
        }

        $field_elements['wysiwyg_fields']['formatter']['type'] = array(
          '#type'  => 'hidden',
          '#value' => $default_formatter,
        );
        if (count($formatters) > 1) {
          $field_elements['wysiwyg_fields']['formatter']['type'] = array(
            '#title'         => t('Formatter'),
            '#type'          => 'select',
            '#options'       => $formatters,
            '#default_value' => $default_formatter,
            '#ajax'          => array(
              'callback' => 'wysiwyg_fields_formatters_settings_ajax',
              'wrapper'  => "{$id}-inner",
            ),
          );
        }

        // Formatter settings.
        $field_elements['wysiwyg_fields']['formatter']['settings'] = array(
          '#type' => 'container',
        );

        $formatter = field_info_formatter_types($default_formatter);
        $function  = "{$formatter['module']}_field_formatter_settings_form";
        if (!empty($formatter['settings']) && function_exists($function)) {
          $instance['display']['default'] = array(
            'type'     => $default_formatter,
            'settings' => $formatter['settings'],
          );
          $field_elements['wysiwyg_fields']['formatter']['settings'] += $function($field, $instance, 'default', $form, $form_state);
        }

        // Add more button.
        $field_elements['add_more'] = array(
          '#type'                    => 'submit',
          '#name'                    => strtr(implode('-', array_merge($parents, array($field_name))), '-', '_') . '_add_more',
          '#value'                   => t('Add another item'),
          '#attributes'              => array(
            'class' => array(
              'field-add-more-submit',
              'element-invisible',
            )
          ),
          '#limit_validation_errors' => array(
            array_merge($parents, array(
              $field_name,
              $langcode
            ))
          ),
          '#submit'                  => array('field_add_more_submit'),
          '#ajax'                    => array(
            'callback' => 'wysiwyg_fields_field_add_more_js',
            'wrapper'  => "{$id}-inner",
            'effect'   => 'fade',
          ),
          '#weight'                  => 105,
          '#parents'                 => array($field_name, 'add_more'),
        );
      }
    }
  }

  return $field_elements;
}

/**
 * AJAX callback for Wysiwyg Fields formatters settings select box.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|null
 */
function wysiwyg_fields_formatters_settings_ajax($form, &$form_state) {
  // Go three levels up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($form_state['triggering_element']['#array_parents'], 0, -3));

  // Adjust element wrapper.
  $id                 = "wysiwyg_fields-{$form['#entity_type']}-{$form['#bundle']}-{$element['#field_name']}";
  $element['#prefix'] = "<div id='{$id}-inner'>";
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Ajax callback in response to a new empty Wysiwyg Fields widget being added.
 *
 * This returns the new page content to replace the page content made obsolete
 * by the form submission.
 *
 * @param $form
 * @param $form_state
 *
 * @return array|null
 */
function wysiwyg_fields_field_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));

  // Add a DIV around the delta receiving the Ajax effect.
  $delta                      = $element['#max_delta'];
  $element[$delta]['#prefix'] = '<div class="ajax-new-content">' . (isset($element[$delta]['#prefix']) ? $element[$delta]['#prefix'] : '');
  $element[$delta]['#suffix'] = (isset($element[$delta]['#suffix']) ? $element[$delta]['#suffix'] : '') . '</div>';

  // Adjust element wrapper.
  $id                 = "wysiwyg_fields-{$form['#entity_type']}-{$form['#bundle']}-{$element['#field_name']}";
  $element['#prefix'] = "<div id='{$id}-inner'>";
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 */
function wysiwyg_fields_form_field_ui_field_edit_form_alter(&$form) {
  $is_wysiwyg_field = FALSE;
  $wysiwyg_fields   = wysiwyg_fields_get_fields();
  foreach ($wysiwyg_fields as $instance) {
    if ($instance['field_name'] == $form['#field']['field_name']) {
      $is_wysiwyg_field = TRUE;
      break;
    }
  }

  if (isset($form['#instance']['widget']['type']) && 'wysiwyg_fields' == $form['#instance']['widget']['type']) {
    // Field instances using Wysiwyg Fields widget must not be required.
    $form['instance']['required'] = array(
      '#type'  => 'value',
      '#value' => FALSE,
    );
  }

  if ($is_wysiwyg_field) {
    // Fields that are used with Wysiwyg Fields must have unlimited cardinality.
    $form['field']['cardinality'] = array(
      '#type'  => 'value',
      '#value' => FIELD_CARDINALITY_UNLIMITED,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 */
function wysiwyg_fields_form_field_ui_display_overview_form_alter(&$form) {
  foreach ($form['#fields'] as $delta => $field_name) {
    $instance = field_info_instance($form['#entity_type'], $field_name, $form['#bundle']);
    // Field instances using Wysiwyg Fields widget must be hidden from standard
    // display.
    if ('wysiwyg_fields' == $instance['widget']['type']) {
      unset($form['fields'][$field_name]);
      unset($form['#fields'][$delta]);
    }
  }
}

/**
 * Implements hook_field_update_field().
 *
 * @param $field
 */
function wysiwyg_fields_field_update_field($field) {
  $is_wysiwyg_field = FALSE;
  $wysiwyg_fields   = wysiwyg_fields_get_fields();
  foreach ($wysiwyg_fields as $instance) {
    if ($instance['field_name'] == $field['field_name']) {
      $is_wysiwyg_field = TRUE;
      break;
    }
  }

  // Fields that are used with Wysiwyg Fields must have unlimited cardinality.
  if ($is_wysiwyg_field && FIELD_CARDINALITY_UNLIMITED != $field['cardinality']) {
    $field['cardinality'] = FIELD_CARDINALITY_UNLIMITED;
    field_update_field($field);
  }
}

/**
 * Implements hook_field_update_instance().
 *
 * @param $instance
 * @param $prior_instance
 *
 * @throws FieldException
 */
function wysiwyg_fields_field_update_instance($instance, $prior_instance) {
  $update = FALSE;
  if ('wysiwyg_fields' == $instance['widget']['type']) {
    // Field instances using Wysiwyg Fields widget must not be required.
    if ($instance['required']) {
      $instance['required'] = FALSE;
      $update               = TRUE;
    }

    // Field instances using Wysiwyg Fields widget must be hidden from standard
    // display.
    foreach ($instance['display'] as &$view_mode) {
      if ('hidden' != $view_mode['type'] || 'hidden' != $view_mode['label']) {
        $view_mode['type']  = 'hidden';
        $view_mode['label'] = 'hidden';
        $update             = TRUE;
      }
    }

    // Check if Field instance button is enabled on any CKEditor profiles, and
    // if not, then display a message to the user.
    $profiles = ckeditor_profile_load();
    $id       = "wysiwyg_fields-{$instance['entity_type']}-{$instance['bundle']}-{$instance['field_name']}";
    $button   = FALSE;
    foreach ($profiles as $profile) {
      if (isset($profile->settings['toolbar']) && strstr($profile->settings['toolbar'], "'{$id}'")) {
        $button = TRUE;
        break;
      }
    }
    if (!$button) {
      drupal_set_message(t('The %label Wysiwyg field isn\'t assigned to any CKEditor profiles.<br /><br />Before this field can be used as a Wysiwyg field you will need to edit your <a href="!profiles">CKEditor profile(s)</a> and add the %label button to the Toolbar.<br /><br />Refer to the <a href="!documentation">Wysiwyg Fields documentation</a> for more details.', array(
        '%label'         => $instance['label'],
        '!profiles'      => url('admin/config/content/ckeditor'),
        '!documentation' => 'https://www.drupal.org/node/2505129',
      )), 'warning', FALSE);
    }

    if ($update) {
      field_update_instance($instance);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wysiwyg_fields_form_ckeditor_admin_profile_form_alter(&$form, &$form_state, $form_id) {
  // Remove the Wysiwyg Fields plugin for the Plugins list as we will control
  // the state based on whether or not any Wysiwyg Fields buttons are in use.
  unset($form['appearance']['loadPlugins']['#options']['wysiwyg_fields']);

  array_unshift($form['#submit'], 'wysiwyg_fields_ckeditor_admin_profile_form_submit');
}

/**
 * @param $form
 * @param $form_state
 */
function wysiwyg_fields_ckeditor_admin_profile_form_submit($form, &$form_state) {
  if (strstr($form_state['values']['toolbar'], "'wysiwyg_fields-")) {
    // If a Wysiwyg Fields button is in use, enable the Wysiwyg Fields plugin.
    // @TODO - If this is not a hosted version of CKEditor, we should also be
    // dealing with the widget and lineutils plugins.
    $form_state['values']['loadPlugins']['wysiwyg_fields'] = 'wysiwyg_fields';

    // Enable the Token filter on specified input formats.
    $form_state['values']['input_formats'] = array_filter($form_state['values']['input_formats']);
    foreach ($form_state['values']['input_formats'] as $format_id) {
      db_merge('filter_format')
        ->key(array('format' => $format_id))
        ->fields(array(
          'cache' => (int) FALSE,
        ))
        ->execute();
      db_merge('filter')->key(array(
        'format' => $format_id,
        'name'   => 'filter_tokens',
      ))->fields(array(
        'module'   => 'token_filter',
        'weight'   => 100,
        'status'   => 1,
        'settings' => serialize(array()),
      ))->execute();
      cache_clear_all($format_id . ':', 'cache_filter', TRUE);
      filter_formats_reset();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function wysiwyg_fields_form_filter_admin_format_form_alter(&$form, &$form_state, $form_id) {
  $active   = FALSE;
  $profiles = ckeditor_profile_load();
  foreach ($profiles as $profile) {
    if (in_array($form['#format']->format, array_keys($profile->input_formats)) && strstr($profile->settings['toolbar'], "'wysiwyg_fields-")) {
      $active = TRUE;
      break;
    }
  }

  // If this Text format is used by a CKEditor with a Wysiwyg field, the Repalce
  // tokens filter is required.
  if ($active) {
    $form['filters']['status']['filter_tokens']['#attributes']['disabled'] = TRUE;
    $form['filters']['status']['filter_tokens']['#value']                  = TRUE;
    $form['filters']['status']['filter_tokens']['#description'] .= '<br />' . t('<strong>Note:</strong> This filter is required as the %text_format is being used by a CKEditor profile with a Wysiwyg field.', array('%text_format' => $form['#format']->name));
  }
}

/**
 * Implements hook_ckeditor_plugin().
 */
function wysiwyg_fields_ckeditor_plugin() {
  $plugins = array();

  $wysiwyg_fields = wysiwyg_fields_get_fields();
  if (!empty($wysiwyg_fields)) {
    $plugins['wysiwyg_fields'] = array(
      'name'    => 'wysiwyg_fields',
      'desc'    => t('Wysiwyg Fields plugin'),
      'path'    => drupal_get_path('module', 'wysiwyg_fields') . '/plugins/ckeditor/',
      'default' => 't',
    );

    foreach ($wysiwyg_fields as $id => $field) {
      $settings = $field['widget']['settings'];

      $bundle = icon_bundle_load($settings['icon']['bundle']);
      if (!isset($bundle['settings']['extension'])) {
        $bundle['settings']['extension'] = 'png';
      }
      $icon = $bundle['path'] . '/' . $settings['icon']['icon'] . '.' . $bundle['settings']['extension'];

      $plugins['wysiwyg_fields']['buttons'][$id] = array(
        // 'icon' needs to be a relative path from the path of this plugin.
        'icon'     => str_repeat('../', count(explode('/', $plugins['wysiwyg_fields']['path']))) . $icon,
        // 'icon_raw' is used to generate a absolute URL of the icon path in via
        // javascript.
        'icon_raw' => $icon,
        'label'    => !empty($settings['label']) ? $settings['label'] : $field['label'],
      );
    }
  }

  return $plugins;
}

/**
 * @param null $entity_type
 * @param null $bundle_name
 * @param bool $reset
 *
 * @return mixed
 *
 * @TODO - Rewrite this function?
 */
function wysiwyg_fields_get_fields($entity_type = NULL, $bundle_name = NULL, $reset = FALSE) {
  $wysiwyg_fields =& drupal_static(__FUNCTION__, array());

  // @TODO - If we do need to get fields by $entity_type/$bundle_name then this
  //    will need work.
  if (empty($wysiwyg_fields) || $reset) {
    $instances = field_info_instances(NULL, NULL);
    foreach ($instances as $entity_name => $bundles) {
      foreach ($bundles as $bundle_name => $fields) {
        foreach ($fields as $field_name => $instance) {
          if ($instance['widget']['type'] == 'wysiwyg_fields') {
            $wysiwyg_fields["wysiwyg_fields-{$entity_name}-{$bundle_name}-{$field_name}"] = $instance;
          }
        }
      }
    }
  }

  return $wysiwyg_fields;
}

/**
 * @param $variables
 */
function template_preprocess_wysiwyg_fields_field_form(&$variables) {
  $element = $variables['element'];

  foreach (element_children($element) as $delta) {
    if (is_numeric($delta)) {
      $variables['deltas'][$delta] = render($element[$delta]);
    }
  }

  $variables['add_more']       = render($element['add_more']);
  $variables['wysiwyg_fields'] = render($element['wysiwyg_fields']);
}
