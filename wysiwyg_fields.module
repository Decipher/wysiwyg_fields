<?php
// $Id$
/**
 * @file
 * CCK Field support for the WYSIWYG module.
 */

/**
 * Implements hook_init().
 */
function wysiwyg_fields_init() {
  foreach (module_list() as $module) {
    if (file_exists($file = dirname(__FILE__) . "/modules/{$module}.inc")) {
      require_once $file;
    }
  }
}

/**
 * Implements hook_menu().
 */
function wysiwyg_fields_menu() {
  $items = array();

  $items['ahah/wysiwyg_fields'] = array(
    'title' => 'Wysiwyg Fields AHAH callback',
    'page callback' => 'wysiwyg_fields_ahah',
    // @TODO - proper permissions.
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );

  $items[drupal_get_path('module', 'wysiwyg_fields') . '/plugins'] = array(
    'title' => 'Wysiwyg Fields dynamic Wysiwyg plugin js',
    'page callback' => 'wysiwyg_fields_wysiwyg_plugin_js',
    // @TODO - proper permissions.
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_elements().
 */
function wysiwyg_fields_elements() {
  $elements = array();

  foreach (module_invoke_all('widget_info') as $widget_type => $widget) {
    $elements[$widget_type] = array(
      '#after_build' => array('wysiwyg_fields_elements_build_after')
    );
  }

  return $elements;
}

/**
 * Implements hook_theme().
 */
function wysiwyg_fields_theme() {
  $items = array();
  $path = drupal_get_path('module', 'wysiwyg_fields') . '/templates';

  $items['wysiwyg_fields_wysiwyg_plugin_js'] = array(
    'arguments' => array(
      'field' => NULL,
    ),
    'template' => 'wysiwyg_fields_wysiwyg_plugin_js',
    'path' => $path,
  );

  return $items;
}

/**
 * Implements hook_wysiwyg_fields_nodeapi_alter().
 *
 * @TODO - Validate doesn't seem to work correctly.
 */
function wysiwyg_fields_wysiwyg_fields_nodeapi_alter(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'prepare':
    case 'validate':
      // @TODO - Do CCK Textareas as well.
      $values = array();
      $tokens = _wysiwyg_fields_text_to_tokens($node->body);
      foreach ($tokens as $token) {
        $values[$token[0]] = wysiwyg_fields_filter('process', 0, -1, $token[0]);
      }

      // Store token values in JavaScript settings for Wysiwyg plugin.
      drupal_add_js(
        array(
          'wysiwygFields' => array(
            'replacements' => $values
          )
        ),
        'setting'
      );
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function wysiwyg_fields_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']['#value']) && $form_id == "{$form['type']['#value']}_node_form") {
    $form['#after_build'][] = 'wysiwyg_fields_form_alter_build_after';
  }

  // Invoke hook_wysiwyg_fields_form_alter().
  drupal_alter('wysiwyg_fields_form_alter', &$form, &$form_state, $form_id);
}

/**
 *
 */
function wysiwyg_fields_elements_build_after($form_element, &$form_state) {
  $field = content_fields($form_element['#field_name'], $form_element['#type_name']);

  if ($form_element['#type'] == $field['widget']['type'] && isset($field['widget']['wysiwyg_fields_status']) && $field['widget']['wysiwyg_fields_status'] == TRUE) {
    // AHAH Wrapper.
    // @TODO - This breaks ImageField/FileField AHAH - fix.
    $prefix = "<div id='{$form_element['#id']}-wysiwyg-fields-ahah-wrapper'>";
    $form_element['#prefix'] = isset($form_element['#prefix']) ? "{$prefix}{$form_element['prefix']}" : $prefix;
    $form_element['#suffix'] = isset($form_element['#suffix']) ? "{$form_element['#suffix']}</div>" : '</div>';

    // Formatters.
    $formatters = array();
    foreach ($field['widget']['wysiwyg_fields_formatters'] as $delta => $formatter) {
      $formatter = _content_get_formatter($formatter, $field['type']);
      $formatters["{$formatter[module]}_formatter_{$delta}"] = $formatter['label'];
    }

    // Multiple formatters - select field.
    if (count($field['widget']['wysiwyg_fields_formatters']) > 1) {
      $form_element['wysiwyg_fields_formatters'] = array(
        '#type' => 'select',
        '#options' => $formatters,
        '#name' => "{$form_element['#name']}[wysiwyg_fields_formatters]",
        '#id' => "{$form_element['#id']}-wysiwyg-fields-formatters",
        '#weight' => 100
      );
    }

    // Single formatter - hidden field.
    else {
      $form_element['wysiwyg_fields_formatters'] = array(
        '#type' => 'hidden',
        '#value' => array_shift(array_keys($formatters)),
        '#name' => "{$form_element['#name']}[wysiwyg_fields_formatters]",
        '#id' => "{$form_element['#id']}-wysiwyg-fields-formatters",
      );
    }

    // Insert button.
    $form_element['wyswyg_fields_insert'] = array(
      '#type' => 'submit',
      '#value' => t('Insert'),
      // @TODO - Find a way to attach an #AHAH event via #build_after.
      //'#ahah' => array(
      //  'path' => 'ahah/wysiwyg_fields/insert',
      //  'wrapper' => "{$form_element['#id']}-wysiwyg-fields-ahah-wrapper",
      //),
      '#name' => "{$form_element['#name']}[wysiwyg_fields_insert]",
      '#id' => "{$form_element['#id']}-wysiwyg-fields-insert",
      '#attributes' => array(
        'class' => 'wysiwyg_fields_insert',
      ),
      '#weight' => 101,
    );
  }

  return $form_element;
}

/**
 *
 */
function wysiwyg_fields_form_alter_build_after($form_element, &$form_state) {
  // Store Content Type in $_SESSION['wysiwyg_fields'] to provide context.
  $_SESSION['wysiwyg_fields'] = $form_element['type']['#value'];

  foreach (content_fields(NULL, $form_element['type']['#value']) as $field) {
    if (isset($field['widget']['wysiwyg_fields_status']) && $field['widget']['wysiwyg_fields_status']) {
      // Enable wysiwyg plugin.
      _wysiwyg_fields_wysiwyg_enable_plugin($field);

      // Modify field element.
      $form_element[$field['field_name']]['#prefix'] = "<div id='wysiwyg_fields-{$field['field_name']}-wrapper'>{$form_element[$field['field_name']]['#prefix']}";
      $form_element[$field['field_name']]['#suffix'] = "{$form_element[$field['field_name']]['#suffix']}</div>";

      // Add javascript.
      jquery_ui_add(array('ui.core', 'ui.dialog'));
      drupal_add_js(drupal_get_path('module', 'wysiwyg_fields') . '/wysiwyg_fields.js');

      // Add Style sheets.
      drupal_add_css(drupal_get_path('module', 'wysiwyg_fields') . '/wysiwyg_fields.css');
      // @TODO - Change if #388384 ever gets resolved.
      if (file_exists($css = drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/base/ui.all.css')) {
        drupal_add_css($css);
      }
      else {
        // @TODO - jQuery 1.6 theme?
      }

    }
  }

  return $form_element;
}

/**
 *
 */
function _wysiwyg_fields_wysiwyg_enable_plugin($field) {
  foreach (wysiwyg_profile_load_all() as $profile) {
    // @TODO - If $profile->settings['buttons'] is empty, the dynamic buttons
    // aren't added.
    if (!empty($profile->settings['buttons'])) {
      $id = "wysiwyg_fields_{$field['field_name']}";
      if (!isset($profile->settings['buttons']['drupal'][$id]) || empty($profile->settings['buttons']['drupal'][$id])) {
        $profile->settings['buttons']['drupal'][$id] = 1;
        db_query("UPDATE {wysiwyg} SET settings = '%s' WHERE format = %d", serialize($profile->settings), $profile->format);
      }
    }
  }
}

/**
 * Page callback; Wysiwyg Fields AHAH.
 */
function wysiwyg_fields_ahah() {
  // Immediately disable devel shutdown functions so that it doesn't botch our
  // JSON output.
  //$GLOBALS['devel_shutdown'] = FALSE;

  if (empty($_POST['form_build_id'])) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'));
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }

  // Invoke wysiwyg_fields_ahah_OP().
  $op = arg(2);
  if (!empty($op)) {
    $function = "wysiwyg_fields_ahah_{$op}";
    print drupal_to_js($function());
  }

  else {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'));
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }
}

/**
 * @TODO - Form is being saved on every Wysiwyg Field insert, stop that!!!
 * @TODO - Weight field becomes visible after AHAH - fix.
 */
function wysiwyg_fields_ahah_insert() {
  // Include node definition.
  module_load_include('inc', 'node', 'node.pages');

  // Load the form.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Process the form with drupal_process_form(), which calls the submit
  // handlers that puts whatever was worthy of keeping in the $form_state.
  drupal_process_form($form_id, $form, $form_state);

  // Session messages would get displayed at the next regular request, but
  // we're in AHAH here, so that won't happen. Make them go away.
  unset($_SESSION['messages']);

  $output = drupal_render($form[arg(3)][arg(4)]);
  $errors = form_get_errors();
  if (isset($errors) && isset($errors[arg(3) . "][" . arg(4) . '][value'])) {
    drupal_set_message($errors[arg(3) . "][" . arg(4) . '][value'], 'error');
    $output = theme('status_messages') . $output;
  }

  else {
    $field = content_fields(arg(3));
    $item = $form_state['values'][arg(3)][arg(4)];
    $formatter = explode('_formatter_', $item['wysiwyg_fields_formatters']);
    $element = _wysiwyg_fields_ahah_get_element($field, $item, $formatter);

    // @TODO - Turn this into a theme function.
    $id = 'wysiwyg_fields-' . arg(3) . '-' . arg(4) . "-{$item['wysiwyg_fields_formatters']}";
    $element = "<span id=\"{$id}\" class=\"wysiwyg_fields wysiwyg_fields-" . arg(3) . "\">" . theme($element['#theme'], $element) . '</span>';

    $output .= "<script type='text/javascript'>Drupal.wysiwyg.instances[Drupal.wysiwyg.activeId].insert('{$element}')</script>";
  }

  return array(
    'status' => TRUE,
    'data' => $output,
  );
}

/**
 *
 */
function wysiwyg_fields_ahah_format() {
  $field = content_fields(arg(3));
  $item = $_POST[arg(3)][arg(4)];
  $formatter = explode('_formatter_', arg(5));

  $element = _wysiwyg_fields_ahah_get_element($field, $item, $formatter);
  return array(
    'output' => theme($element['#theme'], $element),
  );
}

function _wysiwyg_fields_ahah_get_element($field, $item, $formatter) {
  if (function_exists($function = "{$field['module']}_field")) {
  //  // Invoke hook_field('load').
  //  $items = $function('load', $node = array(), $field, $items = array($item), FALSE, FALSE);
  //  $item = isset($items[arg(3)][0]) ? $items[arg(3)][0] : $item;
  //
    // Invoke hook_field('sanitize').
    $items = array(&$item);
    $function('sanitize', $node = array(), $field, $items, FALSE, FALSE);
  }

  $element = array(
    '#formatter' => $formatter[1],
    '#node' => array(), // @TODO - Fix this
    '#type_name' => $field['type_name'],
    '#field_name' => $field['field_name'],
    '#weight' => 0, // @TODO - Fix this
    '#theme' => "{$formatter[0]}_formatter_{$formatter[1]}",
    '#item' => $item,
    '#title' => '', // @TODO - Fix this
    '#description' => '', // @TODO - Fix this
  );

  return $element;
}

/**
 * Page callback; Render dynamic Wysiwyg plugin js.
 */
function wysiwyg_fields_wysiwyg_plugin_js() {
  $request = explode('/', request_uri());
  $field = drupal_substr($request[count($request) - 2], 15);

  header("Content-type: text/javascript");
  print theme('wysiwyg_fields_wysiwyg_plugin_js', $field);
}
