<?php
/**
 * @file
 * CCK Field support for the WYSIWYG module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_wysiwyg_fields_menu_alter().
 */
function wysiwyg_fields_wysiwyg_fields_menu_alter(&$items) {
  $items['ahah/wysiwyg_fields'] = array(
    'title' => 'Wysiwyg Fields AHAH callback',
    'page callback' => 'wysiwyg_fields_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implements hook_wysiwyg_fields_elements_info_alter().
 */
//function wysiwyg_fields_wysiwyg_fields_element_info_alter(&$elements) {
//  foreach (module_invoke_all('field_widget_info') as $widget_type => $widget) {
//    $elements[$widget_type] = isset($elements[$widget_type]) && is_array($elements[$widget_type]) ? $elements[$widget_type] : array();
//    $elements[$widget_type]['#process'] = isset($elements[$widget_type]['#process']) && is_array($elements[$widget_type]['#process']) ? $elements[$widget_type]['#process'] : array();
//    $elements[$widget_type]['#process'][] = 'wysiwyg_fields_elements_process';
//  }
//}

/**
 * Implements hook_elements_info_alter().
 *
 * Add the Wysiwyg Fields processing to all elements so that Wysiwyg Fields can
 * attach Wysiwyg Fields controls if necessary.
 */
function wysiwyg_fields_element_info_alter(&$type) {
  foreach ($type as &$element) {
    $element['#process'] = isset($element['#process']) && is_array($element['#process']) ? $element['#process'] : array();
    $element['#process'][] = 'wysiwyg_fields_elements_process';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function wysiwyg_fields_theme_registry_alter(&$theme_registry) {
  foreach (module_list() as $module) {
    $function = "{$module}_wysiwyg_fields_theme_bypass";
    if (is_array(module_invoke($module, 'widget_info'))) {
      foreach (module_invoke($module, 'widget_info') as $widget_type => $widget) {
        if (isset($theme_registry[$widget_type]) && ((function_exists($function) && !$function($widget_type)) || !function_exists($function))) {
          $theme_registry[$widget_type]['function'] = 'theme_wysiwyg_fields_element';
        }
      }
    }
  }
}

/**
 * Implements hook_wysiwyg_fields_form_alter_alter().
 *
 * Attaches Wysiwyg Fields assets to Entity add/edit forms.
 */
function wysiwyg_fields_wysiwyg_fields_form_alter_alter(&$form, $form_state, $form_id) {
  if (isset($form['#entity_type']) && isset($form["#{$form['#entity_type']}"])) {
    // Make sure the '#attached' key exists and is prepared correctly.
    $form['#attached'] = isset($form['#attached']) ? $form['#attached'] : array();
    $form['#attached']['library'] = isset($form['#attached']['library']) ? $form['#attached']['library'] : array();
    $form['#attached']['js'] = isset($form['#attached']['js']) ? $form['#attached']['js'] : array();

    $fields = array();
    foreach (field_info_instances($form['#entity_type'], $form['#bundle']) as $field) {
      if (isset($field['settings']['wysiwyg_fields']) && $field['settings']['wysiwyg_fields']['status'] == TRUE) {
        $field_info = field_info_field($field['field_name']);

        // Store field settings.
        $fields[$field['field_name']] = array(
          'cardinality' => $field_info['cardinality'],
          // @TODO - Use the proper language instead of assuming LANGUAGE_NONE.
          'delta' => isset($form["#{$form['#entity_type']}"]->{$field['field_name']}[LANGUAGE_NONE]) ? count($form["#{$form['#entity_type']}"]->{$field['field_name']}[LANGUAGE_NONE]): 0,
        );

        // Add dynamically generated Wysiwyg plugin Javascript.
        $js = drupal_get_path('module', 'wysiwyg_fields') . "/plugins/wysiwyg_fields_{$field['field_name']}/wysiwyg_fields_{$field['field_name']}.js";
        $form['#attached']['js'][$js] = array(
          'cache' => FALSE,
          'preproces' => FALSE,
        );

        // Attach field wrapper.
        $form[$field['field_name']]['#prefix'] =  "<div id='wysiwyg_fields-{$field['field_name']}-wrapper'>" . (isset($form[$field['field_name']]['#prefix']) ? $form[$field['field_name']]['#prefix'] : '');
        $form[$field['field_name']]['#suffix'] = (isset($form[$field['field_name']]['#suffix']) ? $form[$field['field_name']]['#suffix'] : '') . '</div>';
      }
    }

    if (!empty($fields)) {
      // Add jQuery UI Dialog library.
      $form['#attached']['library'][] = array('system', 'ui.dialog');

      // Add Javascript.
      $form['#attached']['js'][] = drupal_get_path('module', 'wysiwyg_fields') . '/scripts/wysiwyg_fields.js';
      drupal_alter('wysiwyg_fields_node_form_attached', $form['#attached']);

      // Add Javascript settings.
      $form['#attached']['js'][] = array(
        'data' => array(
          'wysiwygFields' => array(
            'fields' => $fields,
          )
        ),
        'type' => 'setting',
      );

      // Add Style sheets.
      $form['#attached']['css'][] = drupal_get_path('module', 'wysiwyg_fields') . '/styles/node_form.css';

      $form['#after_build'][] = '_wysiwyg_fields_entity_form_after_build';
    }
  }
}

/**
 * @TODO
 */
function _wysiwyg_fields_entity_form_after_build(&$form, $form_state) {
  // Build a fake Entity object.
  $entity_type = $form['#entity_type'];
  $entity = (object) array_merge((array) $form["#{$entity_type}"], isset($form_state['values']) ? $form_state['values'] : array());
  $instances = field_info_instances($entity_type, $entity->type);
  foreach ($instances as $instance) {
    if (isset($instance['settings']['wysiwyg_fields']) && $instance['settings']['wysiwyg_fields']['status'] == TRUE) {
      $field = field_info_field($instance['field_name']);
      if (function_exists($function = "{$field['module']}_field_load"))  {
        $langcode = field_language($entity_type, $entity, $instance['field_name']);
        $items = array(field_get_items($entity_type, $entity, $instance['field_name'], $langcode));
        $function($entity_type, array($entity), $field, array($instance), $langcode, $items, FIELD_LOAD_CURRENT);
        foreach ($items[0] as $delta => $item) {
          $entity->{$instance['field_name']}[$langcode][$delta] = $item;
        }
      }
    }
  }

  // Store Entity type and Bundle in $_SESSION['wysiwyg_fields'] to provide context.
  $_SESSION['wysiwyg_fields'] = array(
    '#entity_type' => $form['#entity_type'],
    '#bundle' => $form['#bundle'],
  );

  $tokens = array();
  $textfields = _wysiwyg_fields_textfields($entity);
  foreach ($textfields as &$textfield) {
    $tokens = array_merge(_wysiwyg_fields_text_to_tokens($textfield['value']), $tokens);
  }

  // $replacements = array();
  foreach ($tokens as $key => $token) {
    // @TODO - Don't guess the delta.
    $form['#attached']['js'][2]['data']['wysiwygFields']['fields'][$token['wf_field']]['replacements'][$token['wf_deltas']][$token['wf_formatter']] = "<wysiwyg_field wf_field='{$token['wf_field']}' wf_deltas='{$token['wf_deltas']}' wf_formatter='{$token['wf_formatter']}' contenteditable='false'>" . _wysiwyg_fields_filter_process($key, array(), array(), NULL, NULL, NULL, $entity) . '</wysiwyg_field>';
  }

  return $form;
}

/**
 * @TODO
 */
function wysiwyg_fields_elements_process($form_element) {
  if (isset($form_element['#field_name']) && isset($form_element['#entity_type'])) {
    $field = field_info_field($form_element['#field_name']);
    $instance = field_info_instance($form_element['#entity_type'], $form_element['#field_name'], $form_element['#bundle']);
    $wysiwyg_fields = isset($instance['settings']['wysiwyg_fields']) ? $instance['settings']['wysiwyg_fields'] : NULL;
    // @TODO - Re-implement bypass check.
    //if (!in_array(TRUE, module_invoke_all('wysiwyg_fields_field_bypass', $field)) && $form_element['#type'] == $field['widget']['type'] && isset($field['widget']['wysiwyg_fields_status']) && $field['widget']['wysiwyg_fields_status'] == TRUE) {
    if (!is_null($wysiwyg_fields) && $wysiwyg_fields['status'] == TRUE) {
      //$form_element['#element_validate'][] = 'wysiwyg_fields_element_validate';

      $form_element['#attributes']['class'][] = "wysiwyg_fields-{$form_element['#field_name']}-{$form_element['#parents'][2]}";

      $form_element['wysiwyg_fields'] = array(
        '#prefix' => '<div class="wysiwyg_fields-widget">',
        '#suffix' => '</div>',
        '#weight' => 200,
        '#tree' => TRUE,
      );

      // Formatters.
      $formatters = array();
      foreach ($wysiwyg_fields['settings']['formatters'] as $delta) {
        $formatter = field_info_formatter_types($delta);
        if (isset($formatter)) {
          $formatters[$delta] = $formatter['label'];
        }
      }

      $form_element['wysiwyg_fields']['formatters'] = array(
        '#type' => 'select',
        '#options' => $formatters,
        '#name' => "{$form_element['#name']}[wysiwyg_fields][formatters]",
        '#id' => "{$form_element['#id']}-wysiwyg-fields-formatters",
        '#attributes' => array(
          'class' => array('wysiwyg_fields_formatters'),
        ),
      );

      // Insert button.
      $form_element['wysiwyg_fields']['insert'] = array(
        '#type' => 'submit',
        '#value' => t('Insert'),
        '#ajax' => array(
          'callback' => 'wysiwyg_fields_ajax_insert',
        ),
        '#name' => "{$form_element['#name']}[wysiwyg_fields][insert]",
        '#id' => "{$form_element['#id']}-wysiwyg-fields-insert",
        '#attributes' => array(
          'class' => array('wysiwyg_fields_insert'),
        ),
      );

      // // Multiselect checkbox.
      // $form_element['wysiwyg_fields']['wysiwyg_fields_select'] = array(
      //  '#type' => 'checkbox',
      //  '#defult_value' => FALSE,
      //  '#name' => "{$form_element['#name']}[wysiwyg_fields_select]",
      //  '#id' => "{$form_element['#id']}-wysiwyg-fields-select",
      //  '#attributes' => array(
      //    'class' => 'wysiwyg_fields_select',
      //  ),
      // );

      // // Original field delta.
      // $form_element['wysiwyg_fields']['delta'] = array(
      //   '#type' => 'hidden',
      //   '#value' => $form_element['#delta']
      // );
    }
  }

  return $form_element;
}

/**
 *
 */
// function wysiwyg_fields_element_validate($element, &$form_state) {
//   if (!empty($form_state['values'][$element['#field_name']])) {
//     foreach ($form_state['values'][$element['#field_name']] as $delta => &$field) {
//       if (is_array($field) && empty($field['wysiwyg_fields']['wysiwyg_fields_formatters'])) {
//         // Some fields have a single field that the widget will later split into
//         // deltas, we need to make sure that the Wyswyg Fields items are still
//         // available to the individual deltas.
//         $post = (!isset($form_state['input'][$element['#field_name']][$delta]) && isset($form_state['input'][$element['#field_name']]['wysiwyg_fields']))
//           ? $form_state['input'][$element['#field_name']]
//           : $form_state['input'][$element['#field_name']][$delta];

//         if (is_array($post)) {
//           if (isset($post['wysiwyg_fields_select']) && !isset($field['wysiwyg_fields_select'])) {
//             $field['wysiwyg_fields_select'] = $post['wysiwyg_fields_select'];
//           }
//           array_walk_recursive($post, '_wysiwyg_fields_element_validate', array(&$field['wysiwyg_fields']['wysiwyg_fields_formatters']));
//         }
//       }
//     }
//   }
// }

// /**
//  *
//  */
// function _wysiwyg_fields_element_validate($item, $key, $formatter) {
//   if ($key == 'wysiwyg_fields_formatters') {
//     $formatter[0] = $item;
//   }
// }

/**
 *
 */
function wysiwyg_fields_icons($checksum = NULL, $reset = FALSE) {
  static $icons = array();

  if (!$reset && $cache = cache_get('wysiwyg_fields_icons')) {
    $icons = $cache->data;
  }

  if (count($icons) == 0) {
    $directories = module_invoke_all('wysiwyg_fields_icons');
    foreach ($directories as $directory) {
      if (is_dir($directory)) {
        foreach (array_diff(scandir($directory), array('.', '..')) as $file) {
          $file = (object) array('uri' => "{$directory}/{$file}");
          if (!is_dir($file->uri) && count(file_validate_is_image($file)) == 0) {
            // User MD5 checksum to prevent duplicates.
            $icons[md5_file($file->uri)] = $file->uri;
          }
        }
      }
    }
    cache_set('wysiwyg_fields_icons', $icons);
  }

  return isset($checksum) ? $icons[$checksum] : $icons;
}

/**
 * Page callback; Wysiwyg Fields AHAH.
 */
function wysiwyg_fields_ahah() {
  // Immediately disable devel shutdown functions so that it doesn't botch our
  // JSON output.
  $GLOBALS['devel_shutdown'] = FALSE;

  if (empty($_POST['form_build_id'])) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'));
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }

  // Invoke wysiwyg_fields_ahah_OP().
  $op = arg(2);
  if (!empty($op)) {
    $function = "wysiwyg_fields_ahah_{$op}";
    print drupal_to_js($function());
  }

  else {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'));
    print drupal_to_js(array('data' => theme('status_messages')));
    exit;
  }
}

/**
 * @TODO - Weight field becomes visible after AHAH - fix.
 */
function wysiwyg_fields_ajax_insert($form, $form_state) {
  //// Include node definition.
  //module_load_include('inc', 'node', 'node.pages');
  //
  //// Load the form.
  //$form_state = array(
  //  'rebuild' => TRUE,
  //  'storage' => NULL,
  //  'submitted' => FALSE
  //);
  //$form_build_id = $_POST['form_build_id'];
  //$form = form_get_cache($form_build_id, $form_state);
  //$args = $form['#parameters'];
  //$form_id = array_shift($args);
  //$form_state['post'] = $form['#post'] = $_POST;
  //$form['#programmed'] = $form['#redirect'] = FALSE;
  //
  //// Process the form with drupal_process_form(), which calls the submit
  //// handlers that puts whatever was worthy of keeping in the $form_state.
  //drupal_process_form($form_id, $form, $form_state);

  // Session messages would get displayed at the next regular request, but
  // we're in AJAX here, so that won't happen. Make them go away.
  unset($_SESSION['messages']);

  //unset($form[arg(3)]['#prefix'], $form[arg(3)]['#suffix']);
  //$output = drupal_render($form[arg(3)]);
  //$errors = form_get_errors();
  //
  //$items = array();
  //$deltas = array();
  //foreach ($form_state['values'][arg(3)] as $delta => $item) {
  //  if (is_array($item) && $item['wysiwyg_fields_select'] == TRUE) {
  //    $items[$delta] = $item;
  //    $deltas[] = $delta;
  //  }
  //}
  //$items = count($items) > 0 ? $items : array($form_state['values'][arg(3)][arg(4)]);
  //$deltas = count($deltas) > 0 ? $deltas : array(arg(4));
  //
  //// Check for empty fields.
  //$field = content_fields(arg(3));
  //$is_empty = "{$field['module']}_content_is_empty";
  //$error = FALSE;
  //$message = '';
  //foreach ($items as $item) {
  //  if ($is_empty($item, $field) && empty($errors[$item['_error_element']])) {
  //    $errors[$item['_error_element']] = t("Can't insert an empty field.");
  //  }
  //
  //  if (isset($errors[$item['_error_element']])) {
  //    $error = TRUE;
  //    $message .= $errors[$item['_error_element']];
  //  }
  //}
  //
  //// @TODO - Add multi-field error checking.
  ////$item = $form_state['values'][arg(3)][arg(4)];
  ////if (isset($errors) && (isset($errors[$item['_error_element']]) || isset($errors[arg(3)]))) {
  ////  $error = isset($errors[$item['_error_element']]) ? $errors[$item['_error_element']] : $errors[arg(3)];
  ////  drupal_set_message($error, 'error');
  ////  $output = theme('status_messages') . $output;
  ////}
  //if ($error) {
  //  drupal_set_message($message, 'error');
  //  $output = theme('status_messages') . $output;
  //}
  //
  //else {
  //  list($formatter_module, $formatter_name) = explode('_formatter_', $items[current(array_keys($items))]['wysiwyg_fields']['wysiwyg_fields_formatters']);
  //  $formatter = _content_get_formatter($formatter_name, $field['module']);
  //  $id = 'wysiwyg_fields-' . arg(3) . '-' . implode('_', $deltas) . "-{$items[current(array_keys($items))]['wysiwyg_fields']['wysiwyg_fields_formatters']}";
  //
  //  if ($formatter['multiple values'] == CONTENT_HANDLE_CORE) {
  //    $element = '';
  //    foreach ($items as $item) {
  //      $item = _wysiwyg_fields_ahah_get_element($field, $item, array($formatter_module, $formatter_name));
  //      $element .= theme($item['#theme'], $item);
  //    }
  //  }
  //  else {
  //    $element = _wysiwyg_fields_ahah_get_element($field, $items, array($formatter_module, $formatter_name));
  //    $element = theme($element['#theme'], $element);
  //  }
  //  dpm($field);
  //  dpm($deltas);
  //  dpm($formatter_module);
  //  dpm($formatter_name);
  //  dpm($element);
  //  //$element = drupal_to_js("<wysiwyg_field wf_field='{$field['field_name']}' wf_deltas='" . implode(',', $deltas) . "' wf_formatter='{$formatter_module}_formatter_{$formatter_name}'>{$element}</wysiwyg_field>");
  //  $element = drupal_to_js("<wysiwyg_field id='{$id}' class='wysiwyg_fields wysiwyg_fields-" . arg(3) . "'>" . $element . "</wrapper_element>");
  //
  //  // Get first empty delta.
  //  $delta = NULL;
  //  ksort($_POST[arg(3)]);
  //  foreach ($_POST[arg(3)] as $count => $item) {
  //    if ($is_empty($item, $field)) {
  //      $delta = $count;
  //      break;
  //    }
  //  }
  //  $add_more = is_null($delta);
  //  $delta = is_null($delta) ? $count + 1 : $delta;
  //
  //  // Insert callback.
  //  dpm(arg(3));
  //  dpm($element);
  //  dpm($delta);
  //  //$output .= "<script type='text/javascript'>Drupal.wysiwygFields.insert('" . arg(3) . "', {$element}, {$delta});</script>";
  //
  //  // Trigger 'Add more' button.
  //  //$add_more = ($field['multiple'] == 1 && $add_more) ? "$('.form-submit[name=\"" . arg(3) . "_add_more\"]').trigger('mousedown');" : '';
  //
  //  // @TODO - Turn this into a theme function?
  //  // @TODO - Clean/Improve up this code.
  //  //$output .= "
  //  //  <script type='text/javascript'>
  //  //    $('#wysiwyg_fields-" . arg(3) . "-wrapper').dialog('close');
  //  //    Drupal.wysiwygFields.dialogClose('" . arg(3) . "');
  //  //    content = {$element};
  //  //    content = content.replace('wrapper_element', Drupal.wysiwygFields.wrapperElement, 'g');
  //  //    Drupal.wysiwyg.instances[Drupal.settings.wysiwygFields.activeId].insert(content);
  //  //    Drupal.settings.wysiwygFields.fields['" . arg(3) . "'].delta = {$delta};
  //  //    {$add_more}
  //  //  </script>";
  //}

  $commands = array();

  if (preg_match('/(.*?)\[(.*?)\]\[(\d*?)\]\[wysiwyg_fields\]\[insert\]/', $form_state['clicked_button']['#name'], $matches)) {
    $deltas = array($matches[3]);

    $entity_type = $form['#entity_type'];
    $entity = $form["#{$entity_type}"];
    $field = field_info_field($matches[1]);
    $instance = field_info_instance($entity_type, $field['field_name'], $form['#bundle']);
    $langcode = $matches[2];
    //$langcode = field_language($obj_type, $object, $field['field_name']);

    $items = array();
    foreach ($deltas as $delta) {
      // @TODO - Prepare item apropriately (file_load() only applicable to
      // files).
      $items[] = (array) file_load($form_state['values'][$field['field_name']][$langcode][$delta]['fid']);
      $formatter_type = $form_state['values'][$field['field_name']][$langcode][$delta]['wysiwyg_fields']['formatters'];
    }

    $formatter = field_info_formatter_types($formatter_type);
    $function = "{$formatter['module']}_field_formatter_view";

    $display = array(
      'label' => 'hidden',
      'type' => $formatter_type,
      'module' => $formatter['module'],
      'settings' => $formatter['settings'],
      // @TODO - Move this to includes/custom_formatters.inc and determine a way
      // to allow contextual links without exposing to anonymous user.
      'cf_options' => array(
        '#contextual_links' => FALSE,
      ),
    );

    // Set next delta.
    $delta = max($deltas) + 1;

    if (function_exists($function)) {
        // Build field output.
        $element = render($function($entity_type, $entity, $field, $instance, $langcode, $items, $display));
        $element = drupal_json_encode("<wysiwyg_field wf_field='{$field['field_name']}' wf_deltas='" . implode(',', $deltas) . "' wf_formatter='{$formatter_type}' contenteditable='false'>{$element}</wysiwyg_field>");

        $commands[] = ajax_command_html(NULL, "<script type='text/javascript'>Drupal.wysiwygFields.insert('{$field['field_name']}', {$element}, {$delta});</script>");
      // }
    }

    // @TODO - Error handling.
    //$errors = form_get_errors();

    $commands[] = ajax_command_html(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // @TODO - Error
}

/**
 *
 */
function _wysiwyg_fields_ahah_get_element($field, $items, $formatter) {
  if (!is_array(current($items))) {
    $items = array($items);
  }

  if (function_exists($function = "{$field['module']}_field")) {
  //  // Invoke hook_field('load').
  //  $items = $function('load', $node = array(), $field, $items = array($item), FALSE, FALSE);
  //  $item = isset($items[arg(3)][0]) ? $items[arg(3)][0] : $item;
  //
    // Invoke hook_field('sanitize').
    $function('sanitize', $node = array(), $field, $items, FALSE, FALSE);
  }

  foreach ($items as $delta => $item) {
    unset($items[$delta]);
    $items[$delta]['#item'] = $item;
  }

  $element = array_merge(
    array(
      '#formatter' => $formatter[1],
      '#node' => array(), // @TODO - Fix this
      '#type_name' => $field['type_name'],
      '#field_name' => $field['field_name'],
      '#weight' => 0, // @TODO - Fix this
      '#theme' => "{$formatter[0]}_formatter_{$formatter[1]}",
      '#item' => $items[current(array_keys($items))]['#item'],
      '#title' => '', // @TODO - Fix this
      '#description' => '', // @TODO - Fix this
    ),
    $items
  );

  return $element;
}

/**
 *
 */
function theme_wysiwyg_fields_element($element) {
  // @TODO - This likely bypasses theme overides. Test, confirm and fix.
  if (!isset($element['wysiwyg_fields']) && function_exists($function = "theme_{$element['#type']}")) {
    return $function($element);
  }
  return $element['#children'];
}
