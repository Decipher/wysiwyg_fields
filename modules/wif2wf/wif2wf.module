<?php
/**
 * @file
 * Wysiwyg ImageField 1.x to Wysiwyg Fields migration tool.
 */

/**
 * Implements hook_menu().
 */
function wif2wf_menu() {
  $items = array();

  $items['admin/content/wif2wf'] = array(
    'title' => 'Migrate Wysiwyg ImageFields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wif2wf_migrate'),
    'access arguments' => array(),
  );

  return $items;
}

/**
 *
 */
function wif2wf_migrate(&$form_state) {
  $op = is_null($form_state['storage']) ? 'form' : 'confirm';
  if (function_exists($function = "wif2wf_migrate_{$op}")) {
    return $function($form_state);
  }
  return array();
}

/**
 *
 */
function wif2wf_migrate_form(&$form_state) {
  $form = array();

  $fields = array();
  foreach (content_types() as $content_type) {
    if (($field = variable_get("wysiwyg_imagefield_{$content_type['type']}", NULL)) !== NULL) {
      if (isset($content_type['fields'][$field])) {
        $fields["{$content_type['type']}-{$field}"] = "{$content_type['type']}: {$field}";
      }
    }
  }

  if (count($fields) > 0) {
    $form['fields'] = array(
      '#title' => t('Fields'),
      '#type' => 'checkboxes',
      '#options' => $fields,
      '#default_value' => array_keys($fields),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Migrate'),
    );
  }

  return $form;
}

/**
 *
 */
function wif2wf_migrate_confirm(&$form_state) {
  return confirm_form(
    array(
      'fields' => array(
        '#type' => 'value',
        '#value' => $form_state['storage']['fields'],
      ),
    ),
    t('Are you sure you want to migrate all data from Wysiwyg ImageField to Wysiwyg Fields?'),
    'admin/content/wif2wf',
    t('This action cannot be undone.'),
    t('Confirm'),
    t('Cancel')
  );
}

/**
 *
 */
function wif2wf_migrate_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#value']) {
    case t('Migrate'):
      $form_state['storage']['fields'] = $form_state['values']['fields'];
      break;

    case t('Confirm'):
      unset($form_state['storage']);
      foreach ($form_state['values']['fields'] as $key => $label) {
        list($content_type_name, $field_name) = explode('-', $key);
        $field = content_fields($field_name, $content_type_name);

        $batch = array(
          'operations' => array(
            array('wif2wf_batch_update', array($field)),
          ),
          'title' => t('Migrating'),
          'error_message' => t('The migration has encountered an error.'),
        );
        batch_set($batch);
      }
      break;
  }
}

/**
 *
 */
function wif2wf_batch_update($field, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $db_info = content_database_info($field);

    // Might run into non-existent tables when cleaning up a corrupted
    // database, like some of the old content storage changes in the
    // .install files.
    if (!db_table_exists($db_info['table'])) {
      return $context['finished'] = 1;
    }
    $nodes = array();
    $result = db_query("SELECT nid FROM {". $db_info['table'] ."} WHERE {$db_info['columns']['fid']['column']} IS NOT NULL");
    while ($node = db_fetch_array($result)) {
      $nodes[] = $node['nid'];
    }
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
  }

  // Process nodes by groups of 5.
  $count = min(5, count($context['sandbox']['nodes']));

  for ($i = 1; $i <= $count; $i++) {
    // For each nid, load the node, empty the column values
    // or the whole field, and re-save it.
    $nid = array_shift($context['sandbox']['nodes']);
    $node = node_load($nid);

    foreach ($node->{$field['field_name']} as $delta => $item) {
      foreach (array_filter($field['widget']['insert_styles']) as $style_name) {
        $style = insert_style_load($style_name);
        $formatter = wif2wf_style2formatter($item, $style, $field['widget']);
        $item_replacement = insert_content($item, $style, $field['widget']);

        // @TODO - Proper replacements.
        $item_replacement = str_replace('__title__', '', $item_replacement);
        $item_replacement = str_replace('__alt__', '', $item_replacement);
        $item_replacement = str_replace('__description__', '', $item_replacement);

        // Turn the insert_content() output into a regular expression to ignore
        // the order of the element attributes that the Wysiwyg will likely have
        // re-ordered.
        $item_replacement = preg_replace('/[<>\/]/', '\\\\\0', $item_replacement);
        preg_match_all('/\<[a-z].*?\>/', $item_replacement, $elements, PREG_SET_ORDER);
        foreach ($elements as $element) {
          $element_replacement = $element[0];
          preg_match_all('/\s\w+=[\'"].*?[\'"]/', $element[0], $attributes, PREG_SET_ORDER);
          foreach ($attributes as $attribute) {
            $attribute_replacement = "(?=[^>]*{$attribute[0]})" . ($attribute == end($attributes) ? '.*?' : '');
            $element_replacement = str_replace($attribute[0], $attribute_replacement, $element_replacement);
          }
          $item_replacement = str_replace($element[0], $element_replacement, $item_replacement);
        }

        $textfields = _wysiwyg_fields_textfields($node);
        foreach ($textfields as &$textfield) {
          $textfield['value'] = preg_replace("/{$item_replacement}/", "[wysiwyg_fields-{$field['field_name']}-{$delta}-{$formatter}]", $textfield['value']);
        }
      }
    }

    node_save($node);

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['message'] = t('Processing %title', array('%title' => $node->title));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 *
 */
function wif2wf_style2formatter($item, $style, $widget) {
  module_load_include('inc', 'wif2wf', "includes/{$style['module']}");
  if (function_exists($function = "{$style['module']}_wif2wf_style2formatter")) {
    return $function($item, $style, $widget);
  }
  return "{$style['module']}_formatter_{$style['name']}";
}
