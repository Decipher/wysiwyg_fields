<?php
/**
 * @file
 * Tests for Wysiwyg Fields module.
 */

/**
 *
 */
class WysiwygFieldsTest extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Wysiwyg Fields functionality',
      'description' => '',
      'group' => 'Wysiwyg Fields',
    );
  }

  function setUp() {
    parent::setUp();
    module_enable(array('wysiwyg_fields'));
    $this->admin_user = $this->drupalCreateUser(array('administer content types', 'create article content', 'edit own article content', 'use text format full_html'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Retrieves a sample file of the specified type.
   */
  function getTestFile($type_name, $size = NULL) {
    // Get a file to upload.
    $file = current($this->drupalGetTestFiles($type_name, $size));

    // Add a filesize property to files as would be read by file_load().
    $file->filesize = filesize($file->uri);

    return $file;
  }

  /**
   * Test Wysiwyg Fields field configuration.
   */
  function testWysiwygFieldsConfig() {
    // Check that the Wysiwyg Fields settings have been attached to the Article
    // Image configuration page.
    $this->drupalGet('admin/structure/types/manage/article/fields/field_image');
    $this->assertText(t('Attach to Wysiwyg?'), 'Wysiwyg Fields settings are present on Article Image configuration page.');

    // Enable Wysiwyg Fields on the Article Image configuration page without
    // assigning a Formatter so that a validation error will be triggered.
    $edit = array(
      'instance[settings][wysiwyg_fields][status]' => TRUE,
    );
    $this->drupalPost('admin/structure/types/manage/article/fields/field_image', $edit, 'Save settings');
    $this->assertText(t('At least one Formatter must be selected to be used with Wysiwyg Fields.'), 'Error message displayed due to Wysiwyg Fields enabled with no Formatter.');

    // Enable Wysiwyg Fields on the Article Image configuration page with a
    // Formatter so that it saves successfully.
    // 'Set field display settings to <Hidden>' option is disabled.
    $edit = array(
      'instance[settings][wysiwyg_fields][status]' => TRUE,
      'instance[settings][wysiwyg_fields][settings][formatters][]' => 'image',
      'instance[settings][wysiwyg_fields][settings][advanced][hide]' => FALSE,
    );
    $this->drupalPost('admin/structure/types/manage/article/fields/field_image', $edit, 'Save settings');
    $this->assertText(t('Saved Image configuration.'), 'Article Image configuration saved succesfully.');

    // Check that the Article Image display is set as default.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertFieldByName('fields[field_image][type]', 'image', 'Article Image display is set to default value.');

    // Update the Article Image Wysiwyg Fields configuration and enable the
    // 'Set field display settings to <Hidden>' setting.
    $edit = array(
      'instance[settings][wysiwyg_fields][settings][advanced][hide]' => TRUE,
    );
    $this->drupalPost('admin/structure/types/manage/article/fields/field_image', $edit, 'Save settings');

    // Check that the Article Image display is set to 'hidden'.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertFieldByName('fields[field_image][type]', 'hidden', 'Article Image display is set to Hidden');

    // Create new textfield and enable for Wysiwyg Fields.
    $edit = array(
      'fields[_add_new_field][label]' => 'Textfield',
      'fields[_add_new_field][field_name]' => 'textfield',
      'fields[_add_new_field][type]' => 'text',
      'fields[_add_new_field][widget_type]' => 'text_textfield',
    );
    $this->drupalPost('admin/structure/types/manage/article/fields', $edit, 'Save');
    $edit = array(
      'instance[settings][wysiwyg_fields][status]' => TRUE,
      'instance[settings][wysiwyg_fields][settings][formatters][]' => array(
        'text_default',
        'text_plain',
      ),
    );
    $this->drupalPost('admin/structure/types/manage/article/fields/field_textfield', $edit, 'Save settings');

    // Check that the appropriate Wysiwyg Fields FAPI elements are added to the
    // Node form.
    $this->drupalGet('node/add/article');
    $this->assertFieldByName('field_textfield[und][0][wysiwyg_fields][formatter][type]', '', 'Wyswiyg Fields formatter field is present.');
    $this->assertRaw('edit-field-textfield-und-0-wysiwyg-fields-formatter-settings', 'Wysiwyg Fields formatters settings wrapper is present.');
    $this->assertFieldByName('field_textfield[und][0][wysiwyg_fields][insert]', '', 'Wyswiyg Fields insert button is present.');
    $this->assertFieldByName('field_textfield[und][0][wysiwyg_fields][select]', '', 'Wysiwyg Fields multi-insert checkbox is present.');
  }

  /**
   *
   */
  function testWyswiygFieldsFunctionality() {
    // Setup Article Image field for use with Wysiwyg Fields.
    $edit = array(
      'instance[settings][wysiwyg_fields][status]' => TRUE,
      'instance[settings][wysiwyg_fields][settings][formatters][]' => 'image',
    );
    $this->drupalPost('admin/structure/types/manage/article/fields/field_image', $edit, 'Save settings');

    // Simulate the creation of a Node with a Article Image Wysiwyg Field
    // inserted into the body.
    $file = $this->GetTestFile('image');
    $file = file_save($file);
    $edit = array(
      'title' => $this->randomName(),
      'field_image[und][0][fid]' => $file->fid,
      'body[und][0][value]' => '[wysiwyg_field wf_deltas="0" wf_field="field_image" wf_formatter="image" wf_settings-image_link="" wf_settings-image_style="thumbnail"]',
      'body[und][0][format]' => 'full_html',
    );
    $this->drupalPost('node/add/article', $edit, 'Save');
  }
}
